(()=>{var e={562:()=>{const e=document.querySelector(".btn"),t=document.querySelector(".ticket-pad"),n="http://localhost:3031";let c,s;const a='\n  <div class="description linear">Краткое описание</div>\n    <input class="descriptionName linear" type="text" name="name"/>\n  <div class="description linear">Подробное описание</div>\n    <textarea class="fullDescriptionName linear" name="description"></textarea>\n',r='\n  <div class="btn-block">\n    <input class="cancel linear" type="button" value="Отмена" />\n    <input class="submit linear" type="button" value="Ok" />\n  </div>\n';document.addEventListener("DOMContentLoaded",(()=>{const e=new XMLHttpRequest;e.open("GET",`${n}/allTickets`),e.onload=()=>{200===e.status&&JSON.parse(e.responseText).forEach((e=>{t.insertAdjacentHTML("beforeend",`<div class="ticket" data-id ="${e.id}">\n            <div class="custom-checkbox ${e.status?"checked":""}"></div>\n            <span class="name" name="name" data-fulldescription ="${e.description}">${e.name}</span>\n            <div class="control-element">\n              <span class="created" name="created">${e.created}</span>\n              <span class="circle">\n                <img class="correct" src="./img/correct.png" alt="Редактирование" />\n              </span>\n              <span class="circle">\n                <img class="delete" src="./img/delete.png" alt="Удаление" />\n              </span>\n            </div>\n          </div>`)}))},e.send()})),e.addEventListener("click",(()=>{t.insertAdjacentHTML("beforeend",`<form class="create-ticket">\n      <div class="correctPad">\n        <div class="description head">Добавить тикет</div>\n        ${a}\n        ${r}  \n      </div>\n    </form>`),c=document.querySelector(".cancel"),s=document.querySelector(".submit"),c.addEventListener("click",(()=>{document.querySelector(".create-ticket").remove()})),s.addEventListener("click",(e=>{e.preventDefault();const c=document.querySelector(".create-ticket"),s=document.querySelector(".descriptionName").value,a=document.querySelector(".fullDescriptionName").value;document.querySelector(".create-ticket").remove();const r=new Date,o=`${r.getDate()}.${r.getMonth()+1}.${r.getFullYear()} ${r.getHours()}:${r.getMinutes()}`,i=new XMLHttpRequest;let l=Array.from(c.elements).filter((e=>{let{name:t}=e;return t})).map((e=>{let{name:t,value:n}=e;return`${t}=${encodeURIComponent(n)}`})).join("&");l=`${l}&created=${encodeURIComponent(o)}`,i.onreadystatechange=()=>{4===i.readyState&&t.insertAdjacentHTML("beforeend",`<div class="ticket" data-id ="${i.responseText}">\n            <div class="custom-checkbox"></div>\n            <span class="name" name="name" data-fulldescription ="${a}">${s}</span>\n            <div class="control-element">\n              <span class="created" name="created">${o}</span>\n              <span class="circle">\n                <img class="correct" src="./img/correct.png" alt="Редактирование" />\n              </span>\n              <span class="circle">\n                <img class="delete" src="./img/delete.png" alt="Удаление" />\n              </span>\n            </div>\n          </div>`)},i.open("POST",`${n}/newTicket`),i.setRequestHeader("Content-type","application/x-www-form-urlencoded"),i.send(l)}))})),t.addEventListener("click",(e=>{if(e.target.classList.contains("custom-checkbox")){e.target.classList.toggle("checked");const t=e.target.classList.contains("checked"),c=e.target.closest(".ticket").dataset.id,s=new XMLHttpRequest,a=`id=${encodeURIComponent(c)}&status=${encodeURIComponent(t)}`;s.onreadystatechange=()=>{4!==s.readyState&&console.log(s.readyState)},s.open("PATCH",`${n}/?${a}`),s.setRequestHeader("Content-type","application/x-www-form-urlencoded"),s.send()}if(e.target.classList.contains("delete")){const c=e.target.closest(".ticket");t.insertAdjacentHTML("beforeend",`<form class="delete-ticket">\n        <div class="deletePad">\n          <div class="description head">Удалить тикет?</div>\n          <div class="description linear">\n            Вы уверены, что хотите удалить тикет? Это действие необратимо.\n          </div>\n          ${r}\n        </div>\n      </form>`),document.querySelector(".cancel").addEventListener("click",(()=>{document.querySelector(".delete-ticket").remove()})),document.querySelector(".submit").addEventListener("click",(e=>{const t=document.querySelector(".fullDes");t&&t.remove(),e.preventDefault();const s=new XMLHttpRequest;s.onreadystatechange=()=>{4===s.readyState&&4===s.readyState&&(c.remove(),document.querySelector(".delete-ticket").remove())};const a=encodeURIComponent(c.dataset.id);s.open("DELETE",`${n}/tickets/${a}`),s.send()}))}else if(e.target.classList.contains("correct")){t.insertAdjacentHTML("beforeend",`<form class="create-ticket">\n        <div class="correctPad">\n          <div class="description head">Изменить тикет</div>\n          ${a}\n          ${r}\n        </div>\n      </form>`);const c=e.target.closest(".ticket");document.querySelector(".descriptionName").value=c.querySelector(".name").textContent,document.querySelector(".fullDescriptionName").value=c.querySelector(".name").dataset.fulldescription;const s=document.querySelector(".cancel"),o=document.querySelector(".submit");s.addEventListener("click",(()=>{document.querySelector(".create-ticket").remove()})),o.addEventListener("click",(()=>{c.querySelector(".name").textContent=document.querySelector(".descriptionName").value,c.querySelector(".name").dataset.fulldescription=document.querySelector(".fullDescriptionName").value;const e=new XMLHttpRequest;e.onreadystatechange=()=>{4===e.readyState&&document.querySelector(".create-ticket").remove()},e.open("PUT",`${n}/updateTicket/${c.dataset.id}`),e.setRequestHeader("Content-type","application/json"),e.send(JSON.stringify({name:document.querySelector(".descriptionName").value,description:document.querySelector(".fullDescriptionName").value}))}))}else if(e.target.classList.contains("status")){const t=e.target.closest(".status"),c=t.closest(".ticket").dataset.id;let s;t.checked?s=!0:t.checked||(s=!1);const a=new XMLHttpRequest,r=`id=${encodeURIComponent(c)}&status=${encodeURIComponent(s)}`;a.onreadystatechange=()=>{4!==a.readyState&&console.log(a.readyState)},a.open("PATCH",`${n}/?${r}`),a.setRequestHeader("Content-type","application/x-www-form-urlencoded"),a.send()}else if((e.target.classList.contains("ticket")||e.target.classList.contains("name"))&&(e.target.classList.contains("ticket")||e.target.classList.contains("name"))){const n=e.target.closest(".ticket"),c=n.querySelector(".name").dataset.fulldescription;c&&""!==c.trim()&&(t.querySelector(".fullDes")?(t.querySelector(".fullDes").remove(),t.querySelectorAll(".ticket").forEach((e=>e.classList.remove("no-bottom-border"))),n.classList.remove("no-bottom-border")):(n.insertAdjacentHTML("afterEnd",`<div class="fullDes no-top-border">\n                <span class="fullDes_content">${c}</span>\n            </div>`),n.classList.add("no-bottom-border")))}}))}},t={};function n(c){var s=t[c];if(void 0!==s)return s.exports;var a=t[c]={exports:{}};return e[c](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var c in t)n.o(t,c)&&!n.o(e,c)&&Object.defineProperty(e,c,{enumerable:!0,get:t[c]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";n(562)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Li9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL2h0dHAtZnJvbnRlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaHR0cC1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9odHRwLWZyb250ZW5kL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9odHRwLWZyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2pzL2FwcC5qc1xuY29uc3QgYWRkVGlja2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ0bicpO1xuY29uc3QgdGlja2V0UGFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpY2tldC1wYWQnKTtcbmNvbnN0IHVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMzEnO1xubGV0IGNhbmNlbDtcbmxldCBzdWJtaXQ7XG5jb25zdCBUSUNLRVRfRklFTERTX0hUTUwgPSBgXG4gIDxkaXYgY2xhc3M9XCJkZXNjcmlwdGlvbiBsaW5lYXJcIj7QmtGA0LDRgtC60L7QtSDQvtC/0LjRgdCw0L3QuNC1PC9kaXY+XG4gICAgPGlucHV0IGNsYXNzPVwiZGVzY3JpcHRpb25OYW1lIGxpbmVhclwiIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm5hbWVcIi8+XG4gIDxkaXYgY2xhc3M9XCJkZXNjcmlwdGlvbiBsaW5lYXJcIj7Qn9C+0LTRgNC+0LHQvdC+0LUg0L7Qv9C40YHQsNC90LjQtTwvZGl2PlxuICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZ1bGxEZXNjcmlwdGlvbk5hbWUgbGluZWFyXCIgbmFtZT1cImRlc2NyaXB0aW9uXCI+PC90ZXh0YXJlYT5cbmA7XG5jb25zdCBUSUNLRVRfRk9STV9CVVRUT05TID0gYFxuICA8ZGl2IGNsYXNzPVwiYnRuLWJsb2NrXCI+XG4gICAgPGlucHV0IGNsYXNzPVwiY2FuY2VsIGxpbmVhclwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cItCe0YLQvNC10L3QsFwiIC8+XG4gICAgPGlucHV0IGNsYXNzPVwic3VibWl0IGxpbmVhclwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIk9rXCIgLz5cbiAgPC9kaXY+XG5gO1xuXG4vLyDQn9C+0LvRg9GH0LXQvdC40LUg0YHQv9C40YHQutCwINGC0LjQutC10YLQvtCyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgeGhyLm9wZW4oJ0dFVCcsIGAke3VybH0vYWxsVGlja2V0c2ApO1xuICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IHRpY2tldHMgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgdGlja2V0cy5mb3JFYWNoKCh0aWNrZXQpID0+IHtcbiAgICAgICAgdGlja2V0UGFkLmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgICAnYmVmb3JlZW5kJyxcbiAgICAgICAgICBgPGRpdiBjbGFzcz1cInRpY2tldFwiIGRhdGEtaWQgPVwiJHt0aWNrZXQuaWR9XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNoZWNrYm94ICR7dGlja2V0LnN0YXR1cyA/ICdjaGVja2VkJyA6ICcnfVwiPjwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuYW1lXCIgbmFtZT1cIm5hbWVcIiBkYXRhLWZ1bGxkZXNjcmlwdGlvbiA9XCIke3RpY2tldC5kZXNjcmlwdGlvbn1cIj4ke3RpY2tldC5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sLWVsZW1lbnRcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjcmVhdGVkXCIgbmFtZT1cImNyZWF0ZWRcIj4ke3RpY2tldC5jcmVhdGVkfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiY29ycmVjdFwiIHNyYz1cIi4vaW1nL2NvcnJlY3QucG5nXCIgYWx0PVwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtVwiIC8+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiZGVsZXRlXCIgc3JjPVwiLi9pbWcvZGVsZXRlLnBuZ1wiIGFsdD1cItCj0LTQsNC70LXQvdC40LVcIiAvPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICB4aHIuc2VuZCgpO1xufSk7XG4vLyDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgtC40LrQtdGC0LBcbmFkZFRpY2tldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgdGlja2V0UGFkLmluc2VydEFkamFjZW50SFRNTChcbiAgICAnYmVmb3JlZW5kJyxcbiAgICBgPGZvcm0gY2xhc3M9XCJjcmVhdGUtdGlja2V0XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29ycmVjdFBhZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb24gaGVhZFwiPtCU0L7QsdCw0LLQuNGC0Ywg0YLQuNC60LXRgjwvZGl2PlxuICAgICAgICAke1RJQ0tFVF9GSUVMRFNfSFRNTH1cbiAgICAgICAgJHtUSUNLRVRfRk9STV9CVVRUT05TfSAgXG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+YCxcbiAgKTtcbiAgY2FuY2VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbmNlbCcpO1xuICBzdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VibWl0Jyk7XG4gIGNhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlLXRpY2tldCcpLnJlbW92ZSgpO1xuICB9KTtcbiAgc3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgY3JlYXRlVGlja2V0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jcmVhdGUtdGlja2V0Jyk7XG4gICAgY29uc3Qgc2hvcnREZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXNjcmlwdGlvbk5hbWUnKS52YWx1ZTtcbiAgICBjb25zdCBmdWxsRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnVsbERlc2NyaXB0aW9uTmFtZScpLnZhbHVlO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jcmVhdGUtdGlja2V0JykucmVtb3ZlKCk7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3Qgbm93RGF0ZSA9IGAke2RhdGUuZ2V0RGF0ZSgpfS4ke2RhdGUuZ2V0TW9udGgoKSArIDF9LiR7ZGF0ZS5nZXRGdWxsWWVhcigpfSAke2RhdGUuZ2V0SG91cnMoKX06JHtkYXRlLmdldE1pbnV0ZXMoKX1gO1xuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGxldCBib2R5ID0gQXJyYXkuZnJvbShjcmVhdGVUaWNrZXRGb3JtLmVsZW1lbnRzKVxuICAgICAgLmZpbHRlcigoeyBuYW1lIH0pID0+IG5hbWUpXG4gICAgICAubWFwKCh7IG5hbWUsIHZhbHVlIH0pID0+IGAke25hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gKVxuICAgICAgLmpvaW4oJyYnKTtcbiAgICBib2R5ID0gYCR7Ym9keX0mY3JlYXRlZD0ke2VuY29kZVVSSUNvbXBvbmVudChub3dEYXRlKX1gO1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgdGlja2V0UGFkLmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgICAnYmVmb3JlZW5kJyxcbiAgICAgICAgICBgPGRpdiBjbGFzcz1cInRpY2tldFwiIGRhdGEtaWQgPVwiJHt4aHIucmVzcG9uc2VUZXh0fVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jaGVja2JveFwiPjwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuYW1lXCIgbmFtZT1cIm5hbWVcIiBkYXRhLWZ1bGxkZXNjcmlwdGlvbiA9XCIke2Z1bGxEZXNjcmlwdGlvbn1cIj4ke3Nob3J0RGVzY3JpcHRpb259PC9zcGFuPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2wtZWxlbWVudFwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNyZWF0ZWRcIiBuYW1lPVwiY3JlYXRlZFwiPiR7bm93RGF0ZX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCI+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImNvcnJlY3RcIiBzcmM9XCIuL2ltZy9jb3JyZWN0LnBuZ1wiIGFsdD1cItCg0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LVcIiAvPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCI+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImRlbGV0ZVwiIHNyYz1cIi4vaW1nL2RlbGV0ZS5wbmdcIiBhbHQ9XCLQo9C00LDQu9C10L3QuNC1XCIgLz5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+YCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vcGVuKCdQT1NUJywgYCR7dXJsfS9uZXdUaWNrZXRgKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIHhoci5zZW5kKGJvZHkpO1xuICB9KTtcbn0pO1xudGlja2V0UGFkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY3VzdG9tLWNoZWNrYm94JykpIHtcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdjaGVja2VkJyk7XG4gICAgY29uc3QgaXNDaGVja2VkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJyk7XG4gICAgY29uc3QgdGlja2V0ID0gZS50YXJnZXQuY2xvc2VzdCgnLnRpY2tldCcpO1xuICAgIGNvbnN0IGlkVGlja2V0ID0gdGlja2V0LmRhdGFzZXQuaWQ7IC8vINC/0L7Qu9GD0YfQsNC10Lwg0LXQs9C+IGlkXG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgYm9keSA9IGBpZD0ke2VuY29kZVVSSUNvbXBvbmVudChpZFRpY2tldCl9JnN0YXR1cz0ke2VuY29kZVVSSUNvbXBvbmVudChpc0NoZWNrZWQpfWA7XG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICBjb25zb2xlLmxvZyh4aHIucmVhZHlTdGF0ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub3BlbignUEFUQ0gnLCBgJHt1cmx9Lz8ke2JvZHl9YCk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcbiAgICB4aHIuc2VuZCgpO1xuICB9XG4gIC8vINCj0LTQsNC70LXQvdC40LUg0YLQuNC60LXRgtCwXG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGV0ZScpKSB7XG4gICAgY29uc3QgdGFyZ2V0VGlja2V0ID0gZS50YXJnZXQuY2xvc2VzdCgnLnRpY2tldCcpO1xuICAgIHRpY2tldFBhZC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYmVmb3JlZW5kJyxcbiAgICAgIGA8Zm9ybSBjbGFzcz1cImRlbGV0ZS10aWNrZXRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRlbGV0ZVBhZFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXNjcmlwdGlvbiBoZWFkXCI+0KPQtNCw0LvQuNGC0Ywg0YLQuNC60LXRgj88L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb24gbGluZWFyXCI+XG4gICAgICAgICAgICDQktGLINGD0LLQtdGA0LXQvdGLLCDRh9GC0L4g0YXQvtGC0LjRgtC1INGD0LTQsNC70LjRgtGMINGC0LjQutC10YI/INCt0YLQviDQtNC10LnRgdGC0LLQuNC1INC90LXQvtCx0YDQsNGC0LjQvNC+LlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICR7VElDS0VUX0ZPUk1fQlVUVE9OU31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Zvcm0+YCxcbiAgICApO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW5jZWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtdGlja2V0JykucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1Ym1pdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGVsKSA9PiB7XG4gICAgICBjb25zdCBmdWxsRGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZ1bGxEZXMnKTtcbiAgICAgIGlmIChmdWxsRGVzY3JpcHRpb25FbGVtZW50KSB7XG4gICAgICAgIGZ1bGxEZXNjcmlwdGlvbkVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICBlbC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgdGFyZ2V0VGlja2V0LnJlbW92ZSgpO1xuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtdGlja2V0JykucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0aWNrZXRJZCA9IGVuY29kZVVSSUNvbXBvbmVudCh0YXJnZXRUaWNrZXQuZGF0YXNldC5pZCk7XG4gICAgICB4aHIub3BlbignREVMRVRFJywgYCR7dXJsfS90aWNrZXRzLyR7dGlja2V0SWR9YCk7XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY29ycmVjdCcpKSB7XG4gICAgLy8g0JjQt9C80LXQvdC10L3QuNC1INGC0LjQutC10YLQsFxuICAgIHRpY2tldFBhZC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYmVmb3JlZW5kJyxcbiAgICAgIGA8Zm9ybSBjbGFzcz1cImNyZWF0ZS10aWNrZXRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvcnJlY3RQYWRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb24gaGVhZFwiPtCY0LfQvNC10L3QuNGC0Ywg0YLQuNC60LXRgjwvZGl2PlxuICAgICAgICAgICR7VElDS0VUX0ZJRUxEU19IVE1MfVxuICAgICAgICAgICR7VElDS0VUX0ZPUk1fQlVUVE9OU31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Zvcm0+YCxcbiAgICApO1xuICAgIGNvbnN0IHRpY2tldENvcnJlY3RWYWx1ZSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50aWNrZXQnKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVzY3JpcHRpb25OYW1lJykudmFsdWUgPSB0aWNrZXRDb3JyZWN0VmFsdWUucXVlcnlTZWxlY3RvcignLm5hbWUnKS50ZXh0Q29udGVudDtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnVsbERlc2NyaXB0aW9uTmFtZScpLnZhbHVlID0gdGlja2V0Q29ycmVjdFZhbHVlLnF1ZXJ5U2VsZWN0b3IoJy5uYW1lJykuZGF0YXNldC5mdWxsZGVzY3JpcHRpb247XG4gICAgY29uc3QgY2FuY2VsQ29ycmVjdERlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbmNlbCcpO1xuICAgIGNvbnN0IHN1Ym1pdENvcnJlY3REZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdWJtaXQnKTtcbiAgICBjYW5jZWxDb3JyZWN0RGVzY3JpcHRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlLXRpY2tldCcpLnJlbW92ZSgpO1xuICAgIH0pO1xuICAgIHN1Ym1pdENvcnJlY3REZXNjcmlwdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRpY2tldENvcnJlY3RWYWx1ZS5xdWVyeVNlbGVjdG9yKCcubmFtZScpLnRleHRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2NyaXB0aW9uTmFtZScpLnZhbHVlO1xuICAgICAgdGlja2V0Q29ycmVjdFZhbHVlLnF1ZXJ5U2VsZWN0b3IoJy5uYW1lJykuZGF0YXNldC5mdWxsZGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnVsbERlc2NyaXB0aW9uTmFtZScpLnZhbHVlO1xuICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlLXRpY2tldCcpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLm9wZW4oJ1BVVCcsIGAke3VybH0vdXBkYXRlVGlja2V0LyR7dGlja2V0Q29ycmVjdFZhbHVlLmRhdGFzZXQuaWR9YCk7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2NyaXB0aW9uTmFtZScpLnZhbHVlLFxuICAgICAgICBkZXNjcmlwdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZ1bGxEZXNjcmlwdGlvbk5hbWUnKS52YWx1ZSxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3N0YXR1cycpKSB7XG4gICAgLy8g0J7QsdGA0LDQsdC+0YLQutCwINGH0LXQutCx0L7QutGBXG4gICAgY29uc3QgY2hlY2tCb3ggPSBlLnRhcmdldC5jbG9zZXN0KCcuc3RhdHVzJyk7XG4gICAgY29uc3QgdGlja2V0SW5Ub0NoZWNrID0gY2hlY2tCb3guY2xvc2VzdCgnLnRpY2tldCcpO1xuICAgIGNvbnN0IGlkVGlja2V0ID0gdGlja2V0SW5Ub0NoZWNrLmRhdGFzZXQuaWQ7XG4gICAgbGV0IGNvbmRpdGlvbkNoZWNrQm94O1xuICAgIGlmIChjaGVja0JveC5jaGVja2VkKSB7XG4gICAgICBjb25kaXRpb25DaGVja0JveCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghY2hlY2tCb3guY2hlY2tlZCkge1xuICAgICAgY29uZGl0aW9uQ2hlY2tCb3ggPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgYm9keSA9IGBpZD0ke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgIGlkVGlja2V0LFxuICAgICl9JnN0YXR1cz0ke2VuY29kZVVSSUNvbXBvbmVudChjb25kaXRpb25DaGVja0JveCl9YDtcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHhoci5yZWFkeVN0YXRlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vcGVuKCdQQVRDSCcsIGAke3VybH0vPyR7Ym9keX1gKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIHhoci5zZW5kKCk7XG4gIH0gZWxzZSBpZiAoXG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0aWNrZXQnKVxuICAgIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbmFtZScpXG4gICkge1xuICAgIGlmIChcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGlja2V0JylcbiAgICAgIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbmFtZScpXG4gICAgKSB7XG4gICAgICBjb25zdCB0aWNrZXQgPSBlLnRhcmdldC5jbG9zZXN0KCcudGlja2V0Jyk7XG4gICAgICBjb25zdCB0aWNrZXRGdWxsRGVzY3JpcHRpb24gPSB0aWNrZXQucXVlcnlTZWxlY3RvcignLm5hbWUnKS5kYXRhc2V0LmZ1bGxkZXNjcmlwdGlvbjtcbiAgICAgIGlmICh0aWNrZXRGdWxsRGVzY3JpcHRpb24gJiYgdGlja2V0RnVsbERlc2NyaXB0aW9uLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICAgaWYgKCF0aWNrZXRQYWQucXVlcnlTZWxlY3RvcignLmZ1bGxEZXMnKSkge1xuICAgICAgICAgIHRpY2tldC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICAgICAnYWZ0ZXJFbmQnLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJmdWxsRGVzIG5vLXRvcC1ib3JkZXJcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZ1bGxEZXNfY29udGVudFwiPiR7dGlja2V0RnVsbERlc2NyaXB0aW9ufTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aWNrZXQuY2xhc3NMaXN0LmFkZCgnbm8tYm90dG9tLWJvcmRlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tldFBhZC5xdWVyeVNlbGVjdG9yKCcuZnVsbERlcycpLnJlbW92ZSgpO1xuICAgICAgICAgIGNvbnN0IGFsbFRpY2tldHMgPSB0aWNrZXRQYWQucXVlcnlTZWxlY3RvckFsbCgnLnRpY2tldCcpO1xuICAgICAgICAgIGFsbFRpY2tldHMuZm9yRWFjaCgodGspID0+IHRrLmNsYXNzTGlzdC5yZW1vdmUoJ25vLWJvdHRvbS1ib3JkZXInKSk7XG4gICAgICAgICAgdGlja2V0LmNsYXNzTGlzdC5yZW1vdmUoJ25vLWJvdHRvbS1ib3JkZXInKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIl0sIm5hbWVzIjpbImFkZFRpY2tldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRpY2tldFBhZCIsInVybCIsImNhbmNlbCIsInN1Ym1pdCIsIlRJQ0tFVF9GSUVMRFNfSFRNTCIsIlRJQ0tFVF9GT1JNX0JVVFRPTlMiLCJhZGRFdmVudExpc3RlbmVyIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZm9yRWFjaCIsInRpY2tldCIsImluc2VydEFkamFjZW50SFRNTCIsImlkIiwiZGVzY3JpcHRpb24iLCJuYW1lIiwiY3JlYXRlZCIsInNlbmQiLCJyZW1vdmUiLCJlIiwicHJldmVudERlZmF1bHQiLCJjcmVhdGVUaWNrZXRGb3JtIiwic2hvcnREZXNjcmlwdGlvbiIsInZhbHVlIiwiZnVsbERlc2NyaXB0aW9uIiwiZGF0ZSIsIkRhdGUiLCJub3dEYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJib2R5IiwiQXJyYXkiLCJmcm9tIiwiZWxlbWVudHMiLCJmaWx0ZXIiLCJfcmVmIiwibWFwIiwiX3JlZjIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInNldFJlcXVlc3RIZWFkZXIiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInRvZ2dsZSIsImlzQ2hlY2tlZCIsImlkVGlja2V0IiwiY2xvc2VzdCIsImRhdGFzZXQiLCJjb25zb2xlIiwibG9nIiwidGFyZ2V0VGlja2V0IiwiZWwiLCJmdWxsRGVzY3JpcHRpb25FbGVtZW50IiwidGlja2V0SWQiLCJ0aWNrZXRDb3JyZWN0VmFsdWUiLCJ0ZXh0Q29udGVudCIsImZ1bGxkZXNjcmlwdGlvbiIsImNhbmNlbENvcnJlY3REZXNjcmlwdGlvbiIsInN1Ym1pdENvcnJlY3REZXNjcmlwdGlvbiIsInN0cmluZ2lmeSIsImNoZWNrQm94IiwiY29uZGl0aW9uQ2hlY2tCb3giLCJjaGVja2VkIiwidGlja2V0RnVsbERlc2NyaXB0aW9uIiwidHJpbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0ayIsImFkZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=